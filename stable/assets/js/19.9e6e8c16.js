(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{256:function(e,t,i){e.exports=i.p+"assets/img/API-Class-Diagram.53852681.png"},257:function(e,t,i){e.exports=i.p+"assets/img/API-Versioning.fd2dc4a4.png"},442:function(e,t,i){"use strict";i.r(t);var s=i(3),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"api-versioning"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-versioning"}},[e._v("#")]),e._v(" API Versioning")]),e._v(" "),s("h2",{attrs:{id:"introduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),s("p",[s("em",[e._v("API Catalog")]),e._v(" is the catalog of published API services and their associated documentation that have been\ndiscovered or might get available if provisioned from the service catalog.")]),e._v(" "),s("p",[s("em",[e._v("Application program interface (API)")]),e._v(" is a set of functions and procedures that allow the creation\nof applications which access the features or data of other applications, service, or systems.")]),e._v(" "),s("p",[e._v("Our API Catalog contains APIs of services provided by implementations of mainframe products. Service can\nbe implemented by one or more service instances (that provide exactly the same service for\nhigh-availability or scalability).")]),e._v(" "),s("h3",{attrs:{id:"versioning"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#versioning"}},[e._v("#")]),e._v(" Versioning")]),e._v(" "),s("p",[e._v("APIs are versioned. Users of the API specify the major version ("),s("code",[e._v("v1")]),e._v(", "),s("code",[e._v("v2")]),e._v("). Backward incompatible\nchanges can be introduced only with changing major version. The service can provide multiple\nversions of the API (it should provide "),s("code",[e._v("v{n}")]),e._v(" and previous "),s("code",[e._v("v{n-1}")]),e._v(" versions).")]),e._v(" "),s("h3",{attrs:{id:"rest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rest"}},[e._v("#")]),e._v(" REST")]),e._v(" "),s("p",[e._v("In our case, we are speaking about REST APIs, which is a way how to access and manipulate textual\nrepresentations of Web resources using uniform and a predefined set of stateless operations.\nUsually via HTTP(S) protocol and using JSON format. Resources are identified by their Uniform\nResource Identifier (URIs). The services are accessed via APIML gateway. Example of a URI:\n"),s("code",[e._v("https://host:10010/api/v1/endevormfno/ENWSQA01/packages/PACKAGETST (https://{gatewayHost}:{port}/api/v{majorVersion}/{serviceName}/{resource}")]),e._v(")\nSee "),s("router-link",{attrs:{to:"/extend/extend-apiml/api-mediation-components-of-URL.html"}},[e._v("Components of URL")]),e._v(" for more information about the URL components of REST APIs.")],1),e._v(" "),s("h2",{attrs:{id:"data-model"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-model"}},[e._v("#")]),e._v(" Data Model")]),e._v(" "),s("p",[e._v("The following data model describes the model behind data about APIs and API services in the API Catalog.\nThe most of the data are provided during service registration. In case of the dynamic registration they are\nprovided by the service. Some of them are determined by the service developer (API-related), system\nadministrator (service-related), and some of them can be altered by user (catalog tiles - in\nfuture).")]),e._v(" "),s("p",[s("img",{attrs:{src:i(256),alt:"API Class Diagram"}})]),e._v(" "),s("p",[s("em",[e._v("(this a "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Class_diagram",target:"_blank",rel:"noopener noreferrer"}},[e._v("UML class diagram"),s("OutboundLink")],1),e._v(")")])]),e._v(" "),s("p",[s("strong",[e._v("Catalog Tile")]),e._v(" - API Catalog UI groups API services into tiles. An API service can be in multiple tiles. The\npurpose of titles is to organize API services on the dashboard of the API Catalog. Default catalog tiles\nare constructed from the definitions provided by the services. In future, it will be possible for\nthe user to modify the tiles.")]),e._v(" "),s("p",[s("strong",[e._v("API")]),e._v(" - "),s("em",[e._v("Api")]),e._v(" object represents a collection of specific versions of the same API which share the\nsame "),s("em",[e._v("apiId")]),e._v(".")]),e._v(" "),s("p",[s("strong",[e._v("API Version")]),e._v(" represents a specific version of the API. This version can be documented by an\nexternal documentation or by a Swagger document. This information is set by the developer of the\nAPI.")]),e._v(" "),s("p",[s("strong",[e._v("Swagger")]),e._v(" represents a Swagger specification instance for a specific API version. See\nhttps://swagger.io/docs/specification/ for more details.")]),e._v(" "),s("p",[s("strong",[e._v("API Association")]),e._v(" provides information how a specific API version is provides by a specific\nservice. Different services can use different basePath. The full path to access endpoints is:\n"),s("code",[e._v("scheme://host:port/basePath/endpointPath")]),e._v(". This information is set by the service developer.")]),e._v(" "),s("p",[s("strong",[e._v("Service")]),e._v(" represents a collection of all service instances. The description and title are taken\nfrom the service with highest version, in case if this is not clear then the latest registered\nwins. API clients are using a service and the API gateway chooses what service instance will be\naccessed. The same API version can be implemented by multiple services. Such services are not\ninterchangeable because they contain or access different data.")]),e._v(" "),s("p",[s("strong",[e._v("Service instance")]),e._v(" is a real implementation of a service. It contains the information about where\nservice is running. The information are provided by the system programmer. The default title and\ndescription is provided by service developer. Instances are interchangeable and they are used to\nachieve high availability.")]),e._v(" "),s("p",[s("strong",[e._v("Route")]),e._v(" - "),s("em",[e._v("Routes")]),e._v(" provide a way how service URLs are mapped to the gateway. Gateway translates\nan URL based on the start of the base path on the gateway and translates it to a base path that is\nused in the URL to access the service. The purpose is to make possible to access services via the\ngateway with a consistent URL format no matter what is the format at the service.")]),e._v(" "),s("p",[s("strong",[e._v("Version")]),e._v(" type follows semantic versioning (http://semver.org/) and is used on multiple places.")]),e._v(" "),s("h3",{attrs:{id:"service-and-instance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service-and-instance"}},[e._v("#")]),e._v(" Service and instance")]),e._v(" "),s("p",[s("em",[e._v("Service")]),e._v(" and "),s("em",[e._v("instance")]),e._v(' are overloaded words that have a different meaning in different contexts.\nThis document uses similar meaning as in (Netflix) Eureka discovery service. Service (or\napplication) is a logical entity that is comprised of functionality to access and manipulate\nspecific resources. Instances are real processes (servers) that provide that functionality to\nclients. Eureka is used in distributed software world where a service is implemented by many\ninstances. But z/OSMF software services registry defines software service instance and software\nservice templates in the context of the provisioning where "instances" are provisioned from\n"templates". z/OSMF service instance does not need to correspond exactly to Eureka service. z/OSMF\nservice instance does need to provide REST API. z/OSMF service instance can be anything that can be\nprovisioned (e.g. multiple services that provide REST API, one API service, additional instance for\na service, just a container for other services, a database server, a database, a table...).')]),e._v(" "),s("h2",{attrs:{id:"api-versioning-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-versioning-2"}},[e._v("#")]),e._v(" API Versioning")]),e._v(" "),s("p",[e._v("Service instances provide one or more different API versions (we take only one assumption: one\nservice instance will not provide two versions with the same major version, no other assumptions\nwhich versions will be provided and how - e.g. an instance can provide only one version and another\nversion will be provided by different instance, other services can have instances that provide\nmultiple versions).")]),e._v(" "),s("p",[e._v("The API user specifies only the major version in the URI. The API catalog needs to differentiate\nbetween different "),s("em",[e._v("full versions")]),e._v(" internally and able to return a specific full version or return\ndocumentation for the highest version of the specified major version that is supported by all\nrunning services.")]),e._v(" "),s("p",[e._v("Guidelines:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("The version of the API, not dependent on the product release")])]),e._v(" "),s("li",[s("p",[e._v("Two last versions are supported")])]),e._v(" "),s("li",[s("p",[e._v("Major version - specified by the user of the API in the URI - increased only when backward\nincompatible change is introduced (it is rare because the REST APIs should be designed to allow\nextensibility)")])]),e._v(" "),s("li",[s("p",[e._v("Minor version - not specified in the URI but the user should know what is it, important to\ndisplay the correct level of documentation. Increased when the API is extended with a new feature\n(if you use a new resource available in v1.2, the service has to provide at least v1.2, the request\nfails on v1.1). If there are multiple instances of the services that have different minor versions,\nthe service together will say that has the lowest minor version (e.g instance A provide v1.3 and\nv2.2, instance B was not yet upgraded and provides v1.2 and v2.1, then the service provides v1.2\nand v2.1)")])]),e._v(" "),s("li",[s("p",[e._v("Patch version - not specified in the URI, no difference in the API, used only when the API\ndocumentation is patched or a bug was fixed, there is no change in the API")])])]),e._v(" "),s("p",[s("img",{attrs:{src:i(257),alt:"API Versioning"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);